To work on u-boot, I will need to test the changes. Here are some commands to load the device tree and patch it:
load nvme 0:4 $fdt_addr_r /boot/nixos/wf7lhx4qca1wrrzy34w4a53cxgair4j4-linux-aarch64-unknown-linux-gnu-5.16.0-rc4-asahi-next-20211206-dtbs/apple/t8103-j274.dtb
fdt addr $fdt_addr_r
fdt boardsetup

It seems I overlooked that enable-method = "spin-table" is set on the device trees, so it is in fact u-boot that sets the cpu-release-addrs and those values shouldn't be copied? But now, with everything except the CPUs copied, let's try to get this party started:
load nvme 0:4 $fdt_addr_r /boot/nixos/wf7lhx4qca1wrrzy34w4a53cxgair4j4-linux-aarch64-unknown-linux-gnu-5.16.0-rc4-asahi-next-20211206-dtbs/apple/t8103-j274.dtb
fdt addr $fdt_addr_r
fdt boardsetup
setenv ramdisk_addr_r 0x970000000
setenv bootargs 'init=/nix/store/v20q3922171g3hb7wvrgvx7rmifhcsx5-nixos-system-nixos-21.11pre-git/init earlycon console=ttySAC0,1500000 console=tty0 debug boot.shell_on_fail'
load nvme 0:4 $kernel_addr_r /boot/nixos/wf7lhx4qca1wrrzy34w4a53cxgair4j4-linux-aarch64-unknown-linux-gnu-5.16.0-rc4-asahi-next-20211206-Image
load nvme 0:4 $ramdisk_addr_r /boot/nixos/lrfki053w540pcqvdfy4cbjcbdxvjxik-initrd-linux-aarch64-unknown-linux-gnu-5.16.0-rc4-asahi-next-20211206-initrd
booti $kernel_addr_r $ramdisk_addr_r:$filesize $fdt_addr_r

This doesn't seem to be significantly improved over just using the firmware device tree, but it does start instead of just instantly crashing. Let's try the sysboot command:
setenv fdtfile apple/t8103-j274.dtb
setenv ramdisk_addr_r 0x823200000
sysboot nvme 0:4 any 0x960000000 /boot/extlinux/extlinux.conf

Blah, it does the same thing, and the root still doesn't come up. Let's try without the hypervisor, maybe? Still the same story of "rtkit did not boot". Weird. Is there something u-boot needs to do to shut down the nvme drive on the way out? Let's confirm that chainloading the kernel directly works:
m1n1/bin/m1n1-linux -b 'init=/nix/store/v20q3922171g3hb7wvrgvx7rmifhcsx5-nixos-system-nixos-21.11pre-git/init earlycon console=ttySAC0,1500000 console=tty0 debug boot.shell_on_fail' bootbits/Image.gz bootbits/apple.dtb bootbits/initrd

It indeed does, and the RTkit stuff starts with "RTKit: Initializing (protocol version 12)" Let's dig into u-boot and see if there is anything obvious? There is something about setting up mailbox reserved memory ranges but only in EFI, but I tested and NVMe doesn't come up in EFI either, with the same error. But it looks like there are a bunch of recent kernel updates related to NVMe and SART, so maybe those know how to properly reinitialize the controller? Let's rebuild and reflash the rootfs and try to boot it with extlinux under the hypervisor... And nope, no dice :( Just to be sure, loading the kernel with m1n1 does work still.

To confirm that this is sort of a "one user at a time" problem, let's try stock u-boot with a USB EFI boot. That, curiously, does not mention nvme at all. Let's try with a root filesystem instead on the USB so that way Linux can load its own device tree. Hm, that just crashes. What if we use the kettenis u-boot, but stop it from enumerating nvme devices? Ah hah, that boots (off the flash drive) and shows the NVMe device! Then, if we run "nvme scan", but boot off the flash drive anyway, the NVMe device does not show up. And, when I reboot, there is an oops in apple_nvme_shutdown -> nvme_wait_reset -> nvme_change_ctrl_state -> __wake_up. Maybe a clue as to what U-boot is failing to do?
